# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
services:
    # default configuration for services in *this* file
    raw.search_filter:
        parent: 'api_platform.doctrine.orm.search_filter'
        arguments: [ { id: 'exact' } ]
        tags:  [ 'api_platform.filter' ]

    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    
    App\EventListener\UserRegistrationListener:
        tags:
            - { name: doctrine.event_listener, event: postPersist }

    App\Serializer\SerializationContextBuilder:
        decorates: 'serializer.normalizer.object'
        arguments: ['@App\Serializer\SerializationContextBuilder.inner']

    App\DataProcessor\UserProcessor:
        # bind:
        public: true
        # $decoratedDataPersister: '@api_platform.doctrine.orm.state.persist_processor'
        decorates: 'api_platform.doctrine.orm.state.persist_processor'
        arguments:
            $decoratedDataPersister: '@App\DataProcessor\UserProcessor.inner'
        tags: ['api_platform.data_processor']

    App\OpenApi\JwtDecorator:
        decorates: 'api_platform.openapi.factory'
        arguments: [ '@.inner' ]

    acme_api.event.jwt_created_listener:
        class: App\EventListener\JWTCreatedListener
        arguments: [ '@request_stack' ]
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_created, method: onJWTCreated }
